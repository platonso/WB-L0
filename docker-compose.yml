services:
  postgres:
    image: postgres:17
    container_name: order-viewer-db
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - order-viewer-data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER" ]
      interval: 5s
      timeout: 2s
      retries: 5

    networks:
      - order-viewer-network

  kafka:
    image: redpandadata/redpanda:v24.1.10
    container_name: kafka
    command:
      - redpanda
      - start
      - --overprovisioned
      - --smp=1
      - --memory=1G
      - --reserve-memory=0M
      - --node-id=0
      - --check=false
      - --kafka-addr=PLAINTEXT://0.0.0.0:9092,OUTSIDE://0.0.0.0:19092
      - --advertise-kafka-addr=PLAINTEXT://kafka:9092,OUTSIDE://localhost:19092
    ports:
      - "19092:19092"
    restart: unless-stopped
    networks:
      - order-viewer-network

  backend:
    build: .
    image: order-viewer:latest
    container_name: order-viewer-backend
    env_file:
      - .env
    environment:
      - KAFKA_BROKERS=kafka:9092
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started
    restart: unless-stopped
    networks:
      - order-viewer-network

  emitter:
    image: order-viewer:latest
    container_name: order-viewer-emitter
    command: [ "sh", "-c", "sleep 10 && /app/kafka-emitter -brokers=kafka:9092 -topic=orders -orders=10 -interval=300ms" ]
    depends_on:
      kafka:
        condition: service_started
    restart: on-failure
    networks:
      - order-viewer-network

networks:
  order-viewer-network:
    name: order-viewer-network
    driver: bridge

volumes:
  order-viewer-data:
    name: order-viewer-data